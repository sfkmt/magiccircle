name: Automated PR Review

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main, develop]

jobs:
  spec-compliance-check:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'mc-automated')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Review Tools
        run: |
          npm install -g @mc-framework/reviewer
          curl -sSL https://github.com/mc-framework/mc-cli/releases/latest/download/mc-cli-linux-amd64 -o mc-cli
          chmod +x mc-cli
          sudo mv mc-cli /usr/local/bin/
      
      - name: Extract Spec Information
        id: spec-info
        run: |
          # PR„ÅÆ„Éñ„É©„É≥„ÉÅÂêç„Åã„Çâ‰ªïÊßòÂêç„ÇíÊäΩÂá∫
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          SPEC_NAME=$(echo "$BRANCH_NAME" | grep -oP 'feature/\K[^-]+' || echo "unknown")
          echo "spec_name=$SPEC_NAME" >> $GITHUB_OUTPUT
          
          # „Çø„Çπ„ÇØID„ÇíÊäΩÂá∫
          TASK_ID=$(echo "$BRANCH_NAME" | grep -oP 'task-\K\d+' || echo "0")
          echo "task_id=$TASK_ID" >> $GITHUB_OUTPUT
      
      - name: Validate Against Spec
        run: |
          mc-cli validate-pr \
            --spec ${{ steps.spec-info.outputs.spec_name }} \
            --task ${{ steps.spec-info.outputs.task_id }} \
            --pr ${{ github.event.pull_request.number }} \
            --output validation-report.json
      
      - name: Code Quality Check
        run: |
          # „Ç≥„Éº„ÉâÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ
          mc-reviewer analyze \
            --type quality \
            --diff origin/${{ github.base_ref }}...HEAD \
            --output quality-report.json
      
      - name: Security Scan
        run: |
          # „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥
          mc-reviewer analyze \
            --type security \
            --diff origin/${{ github.base_ref }}...HEAD \
            --output security-report.json
      
      - name: Design Pattern Compliance
        run: |
          # Ë®≠Ë®à„Éë„Çø„Éº„É≥„ÅÆÈÅ©ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
          mc-cli check-patterns \
            --spec ${{ steps.spec-info.outputs.spec_name }} \
            --changes "$(git diff origin/${{ github.base_ref }}...HEAD --name-only)" \
            --output pattern-report.json
      
      - name: Generate Review Summary
        id: review
        run: |
          # „É¨„Éì„É•„ÉºÁµêÊûú„ÅÆÈõÜÁ¥Ñ
          node -e "
          const fs = require('fs');
          
          const validation = JSON.parse(fs.readFileSync('validation-report.json', 'utf8'));
          const quality = JSON.parse(fs.readFileSync('quality-report.json', 'utf8'));
          const security = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
          const patterns = JSON.parse(fs.readFileSync('pattern-report.json', 'utf8'));
          
          const passed = validation.passed && quality.passed && security.passed && patterns.passed;
          const score = Math.round((validation.score + quality.score + security.score + patterns.score) / 4);
          
          console.log(\`passed=\${passed}\`);
          console.log(\`score=\${score}\`);
          console.log(\`validation_passed=\${validation.passed}\`);
          console.log(\`quality_passed=\${quality.passed}\`);
          console.log(\`security_passed=\${security.passed}\`);
          console.log(\`patterns_passed=\${patterns.passed}\`);
          " >> $GITHUB_OUTPUT
      
      - name: Post Review Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // „É¨„Éù„Éº„Éà„ÇíË™≠„ÅøËæº„Åø
            const validation = JSON.parse(fs.readFileSync('validation-report.json', 'utf8'));
            const quality = JSON.parse(fs.readFileSync('quality-report.json', 'utf8'));
            const security = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
            const patterns = JSON.parse(fs.readFileSync('pattern-report.json', 'utf8'));
            
            // „É¨„Éì„É•„Éº„Ç≥„É°„É≥„Éà„ÅÆ‰ΩúÊàê
            const reviewBody = `
            ## ü§ñ Ëá™Âãï„É¨„Éì„É•„ÉºÁµêÊûú
            
            **Á∑èÂêà„Çπ„Ç≥„Ç¢**: ${{ steps.review.outputs.score }}/100
            
            ### üìã ‰ªïÊßòÈÅ©ÂêàÊÄß
            - **„Çπ„ÉÜ„Éº„Çø„Çπ**: ${validation.passed ? '‚úÖ ÂêàÊ†º' : '‚ùå ‰∏çÂêàÊ†º'}
            - **„Çπ„Ç≥„Ç¢**: ${validation.score}/100
            - **Ë©≥Á¥∞**: ${validation.summary}
            
            ### üîç „Ç≥„Éº„ÉâÂìÅË≥™
            - **„Çπ„ÉÜ„Éº„Çø„Çπ**: ${quality.passed ? '‚úÖ ÂêàÊ†º' : '‚ùå ‰∏çÂêàÊ†º'}
            - **„Çπ„Ç≥„Ç¢**: ${quality.score}/100
            - **ÂïèÈ°åÁÇπ**: ${quality.issues.length}‰ª∂
            ${quality.issues.slice(0, 3).map(i => `  - ${i.message}`).join('\n')}
            
            ### üîí „Çª„Ç≠„É•„É™„ÉÜ„Ç£
            - **„Çπ„ÉÜ„Éº„Çø„Çπ**: ${security.passed ? '‚úÖ ÂêàÊ†º' : '‚ùå ‰∏çÂêàÊ†º'}
            - **„Çπ„Ç≥„Ç¢**: ${security.score}/100
            - **ËÑÜÂº±ÊÄß**: ${security.vulnerabilities.length}‰ª∂
            ${security.vulnerabilities.slice(0, 3).map(v => `  - ${v.severity}: ${v.message}`).join('\n')}
            
            ### üèóÔ∏è Ë®≠Ë®à„Éë„Çø„Éº„É≥
            - **„Çπ„ÉÜ„Éº„Çø„Çπ**: ${patterns.passed ? '‚úÖ ÂêàÊ†º' : '‚ùå ‰∏çÂêàÊ†º'}
            - **„Çπ„Ç≥„Ç¢**: ${patterns.score}/100
            - **Êé®Â•®‰∫ãÈ†Ö**: ${patterns.recommendations.length}‰ª∂
            ${patterns.recommendations.slice(0, 3).map(r => `  - ${r}`).join('\n')}
            
            ### üìä Ë©≥Á¥∞„É¨„Éù„Éº„Éà
            - [‰ªïÊßòÈÅ©ÂêàÊÄß„É¨„Éù„Éº„Éà](${validation.detailsUrl || '#'})
            - [„Ç≥„Éº„ÉâÂìÅË≥™„É¨„Éù„Éº„Éà](${quality.detailsUrl || '#'})
            - [„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É¨„Éù„Éº„Éà](${security.detailsUrl || '#'})
            - [Ë®≠Ë®à„Éë„Çø„Éº„É≥„É¨„Éù„Éº„Éà](${patterns.detailsUrl || '#'})
            
            ---
            *„Åì„ÅÆ„É¨„Éì„É•„Éº„ÅØËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü„ÄÇË≥™Âïè„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅ‰ªïÊßòÊõ∏Ôºà.mc/specs/${{ steps.spec-info.outputs.spec_name }}Ôºâ„ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ*
            `;
            
            // PR„Å´„Ç≥„É°„É≥„Éà„ÇíÊäïÁ®ø
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reviewBody
            });
            
            // „É¨„Éì„É•„Éº„Çπ„ÉÜ„Éº„Çø„Çπ„ÅÆË®≠ÂÆö
            const event = ${{ steps.review.outputs.passed }} ? 'APPROVE' : 'REQUEST_CHANGES';
            await github.rest.pulls.createReview({
              pull_request_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              event: event,
              body: ${{ steps.review.outputs.passed }} 
                ? 'Ëá™Âãï„É¨„Éì„É•„Éº„Å´ÂêàÊ†º„Åó„Åæ„Åó„Åü„ÄÇ„Éû„Éº„Ç∏„ÅÆÊ∫ñÂÇô„Åå„Åß„Åç„Å¶„ÅÑ„Åæ„Åô„ÄÇ' 
                : 'Ëá™Âãï„É¨„Éì„É•„Éº„ÅßÂïèÈ°å„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü„ÄÇ‰∏äË®ò„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
            });
      
      - name: Update PR Labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = ['mc-reviewed'];
            
            if (${{ steps.review.outputs.passed }}) {
              labels.push('ready-to-merge');
            } else {
              labels.push('needs-work');
            }
            
            if (${{ steps.review.outputs.score }} >= 90) {
              labels.push('high-quality');
            }
            
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels
            });

  update-task-status:
    needs: spec-compliance-check
    runs-on: ubuntu-latest
    if: success()
    steps:
      - uses: actions/checkout@v4
      
      - name: Update Task Progress
        run: |
          # „Çø„Çπ„ÇØ„ÅÆÈÄ≤Êçó„ÇíÊõ¥Êñ∞
          SPEC_NAME=$(echo "${{ github.event.pull_request.head.ref }}" | grep -oP 'feature/\K[^-]+' || echo "unknown")
          TASK_ID=$(echo "${{ github.event.pull_request.head.ref }}" | grep -oP 'task-\K\d+' || echo "0")
          
          mc-cli update-task-status \
            --spec "$SPEC_NAME" \
            --task "$TASK_ID" \
            --status "in-review" \
            --pr "${{ github.event.pull_request.number }}"