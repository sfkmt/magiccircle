name: MC Framework Automated Execution

on:
  workflow_dispatch:
    inputs:
      spec_name:
        description: '実行する仕様名'
        required: true
        type: string
      execution_mode:
        description: '実行モード'
        required: false
        default: 'automated'
        type: choice
        options:
          - automated
          - dry-run
      parallel:
        description: '並列実行を有効化'
        required: false
        default: true
        type: boolean

jobs:
  validate-spec:
    runs-on: ubuntu-latest
    outputs:
      is_approved: ${{ steps.check.outputs.approved }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Spec Approval Status
        id: check
        run: |
          SPEC_FILE=".mc/specs/${{ inputs.spec_name }}/spec.json"
          if [ ! -f "$SPEC_FILE" ]; then
            echo "::error::Spec not found: ${{ inputs.spec_name }}"
            exit 1
          fi
          
          TASKS_APPROVED=$(jq -r '.phases.tasks.approved' "$SPEC_FILE")
          if [ "$TASKS_APPROVED" != "true" ]; then
            echo "::error::Tasks phase not approved for spec: ${{ inputs.spec_name }}"
            exit 1
          fi
          
          echo "approved=true" >> $GITHUB_OUTPUT

  generate-sow:
    needs: validate-spec
    if: needs.validate-spec.outputs.is_approved == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Claude Code
        run: |
          # Claude Code CLIのインストール
          npm install -g @anthropic/claude-code-cli
          
      - name: Generate SOW
        run: |
          claude-code run "/mc:sow-create ${{ inputs.spec_name }} --output-format json" > sow.json
          
      - name: Upload SOW
        uses: actions/upload-artifact@v3
        with:
          name: sow-${{ inputs.spec_name }}
          path: sow.json

  execute-tasks:
    needs: generate-sow
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 動的にタスクマトリクスを生成
        task: ${{ fromJson(needs.generate-sow.outputs.tasks) }}
      max-parallel: ${{ inputs.parallel && 4 || 1 }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Environment
        run: |
          # 必要な依存関係のセットアップ
          npm install
          pip install -r requirements.txt || true
          
      - name: Download SOW
        uses: actions/download-artifact@v3
        with:
          name: sow-${{ inputs.spec_name }}
          
      - name: Optimize Context
        run: |
          claude-code run "/mc:context-optimize ${{ inputs.spec_name }} --task-id ${{ matrix.task.id }} --strategy balanced"
          
      - name: Execute Task
        id: execute
        run: |
          claude-code run "/mc:task-execute ${{ inputs.spec_name }} --task-id ${{ matrix.task.id }} --mode ${{ inputs.execution_mode }}"
          
      - name: Run Tests
        if: steps.execute.outcome == 'success' && inputs.execution_mode != 'dry-run'
        run: |
          # タスク固有のテストを実行
          npm test -- --testPathPattern="${{ matrix.task.test_pattern }}"
          
      - name: Create Task Branch
        if: steps.execute.outcome == 'success' && inputs.execution_mode != 'dry-run'
        run: |
          BRANCH_NAME="mc-auto/${{ inputs.spec_name }}/${{ matrix.task.id }}"
          git checkout -b "$BRANCH_NAME"
          git add -A
          git commit -m "feat: Implement ${{ matrix.task.id }} for ${{ inputs.spec_name }}
          
          Task: ${{ matrix.task.objective }}
          
          Auto-generated by MC Framework
          Spec: ${{ inputs.spec_name }}
          Task ID: ${{ matrix.task.id }}"
          
          git push origin "$BRANCH_NAME"

  create-integration-pr:
    needs: execute-tasks
    runs-on: ubuntu-latest
    if: inputs.execution_mode != 'dry-run'
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Integration Branch
        run: |
          git checkout -b "mc-integration/${{ inputs.spec_name }}"
          
      - name: Merge Task Branches
        run: |
          # 各タスクブランチをマージ
          for branch in $(git branch -r | grep "origin/mc-auto/${{ inputs.spec_name }}/"); do
            git merge --no-ff "$branch" -m "Merge $branch"
          done
          
      - name: Run Integration Tests
        run: |
          npm test
          npm run lint
          npm run typecheck
          
      - name: Generate Compliance Report
        run: |
          claude-code run "/mc:spec-diff ${{ inputs.spec_name }} --compare-with implementation --format github" > compliance-report.md
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          branch: mc-integration/${{ inputs.spec_name }}
          title: "feat: Implement ${{ inputs.spec_name }} (MC Framework Auto-Generated)"
          body: |
            ## Summary
            This PR implements the approved specification for `${{ inputs.spec_name }}`.
            
            ## Implementation Details
            - All tasks have been automatically implemented based on the approved SOW
            - Each task was executed in isolation and tested
            - Integration tests have passed
            
            ## Compliance Report
            ${{ steps.compliance.outputs.report }}
            
            ## Checklist
            - [x] All tasks completed
            - [x] Tests passing
            - [x] Linting passed
            - [x] Type checking passed
            - [ ] Manual review completed
            
            ---
            *This PR was automatically generated by the MC Framework*
          labels: |
            mc-framework
            auto-generated
            spec-${{ inputs.spec_name }}

  analyze-feedback:
    needs: create-integration-pr
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Collect Execution Logs
        run: |
          # 実行ログの収集
          
      - name: Analyze Patterns
        run: |
          claude-code run "/mc:feedback-analyze ${{ inputs.spec_name }} --source workflow-logs"
          
      - name: Update Learning Database
        run: |
          # パターンデータベースの更新
          echo "Patterns analyzed and stored for future optimizations"